services:
  # ==================== DATABASES ====================
  mysql_inventory:
    build:
      context: ./db
      dockerfile: Dockerfile.inventorydb
    container_name: mysql_inventory
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: inventory
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3307:3306"            # acceso desde host
    volumes:
      - inventory_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -prootpassword || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  mysql_billing:
    build:
      context: ./db
      dockerfile: Dockerfile.billingdb
    container_name: mysql_billing
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: billing
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3308:3306"
    volumes:
      - billing_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -prootpassword || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  mysql_payments:
    build:
      context: ./db
      dockerfile: Dockerfile.paymentsdb
    container_name: mysql_payments
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: payments
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3309:3306"
    volumes:
      - payments_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -prootpassword || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  # ==================== AGGREGATOR ====================

  aggregator:
    build:
      context: ./aggregator-service       # carpeta donde está su Dockerfile
      dockerfile: Dockerfile              # si tu archivo se llama distinto, cámbialo
    image: local/aggregator-service:dev   # ← se crea la IMAGEN con esta etiqueta
    container_name: aggregator-service
    restart: unless-stopped
    depends_on:
      mysql_inventory: { condition: service_healthy }
      mysql_billing:   { condition: service_healthy }
      mysql_payments:  { condition: service_healthy }
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_inventory:3306/inventory?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: simis
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_BILLING_URL: jdbc:mysql://mysql_billing:3306/billing?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_BILLING_USERNAME: simis
      SPRING_DATASOURCE_BILLING_PASSWORD: password
      SPRING_DATASOURCE_PAYMENTS_URL: jdbc:mysql://mysql_payments:3306/payments?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_PAYMENTS_USERNAME: simis
      SPRING_DATASOURCE_PAYMENTS_PASSWORD: password
    ports:
      - "8090:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 20


  # ==================== MICROSERVICIOS ====================
  payments-service:
    build: ./payments-service
    container_name: payments-service
    restart: unless-stopped
    depends_on:
      aggregator: { condition: service_healthy }
    environment:
      # OpenFeign leerá aggregator.url; este env var lo sobreescribe por relaxed binding.
      AGGREGATOR_URL: http://aggregator:8080
      LOGGING_LEVEL_feign: INFO
      LOGGING_LEVEL_com.taller5.payments.client: DEBUG
    ports:
      - "8082:8080"

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    restart: unless-stopped
    depends_on:
      aggregator: { condition: service_healthy }
    environment:
      AGGREGATOR_URL: http://aggregator:8080
      LOGGING_LEVEL_feign: INFO
      LOGGING_LEVEL_com.taller5.inventory.dal: DEBUG
    ports:
      - "8081:8080"

  billing-service:
    build: ./billing-service
    container_name: billing-service
    restart: unless-stopped
    depends_on:
      aggregator: { condition: service_healthy }
    environment:
      AGGREGATOR_URL: http://aggregator:8080
      LOGGING_LEVEL_feign: INFO
      LOGGING_LEVEL_com.taller5.billing.dal: DEBUG
    ports:
      - "8083:8080"

volumes:
  inventory_data:
  billing_data:
  payments_data:
