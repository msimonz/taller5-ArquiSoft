version: '3.8'

services:
  # -------------------------
  # Databases
  # -------------------------
  mysql_inventory:
    build:
      context: ./db
      dockerfile: Dockerfile.inventorydb
    container_name: mysql_inventory
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: inventorydb
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_inventory_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql_billing:
    build:
      context: ./db
      dockerfile: Dockerfile.billingdb
    container_name: mysql_billing
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: billingdb
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
    ports:
      - "3308:3306"
    volumes:
      - mysql_billing_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql_payments:
    build:
      context: ./db
      dockerfile: Dockerfile.paymentsdb
    container_name: mysql_payments
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: paymentsdb
      MYSQL_USER: simis
      MYSQL_PASSWORD: password
    ports:
      - "3309:3306"
    volumes:
      - mysql_payments_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -------------------------
  # Monolito (payments)
  # -------------------------
  payments:
    build:
      context: ./payments-service
      dockerfile: Dockerfile
    container_name: payments_service
    depends_on:
      mysql_inventory:
        condition: service_healthy
      mysql_billing:
        condition: service_healthy
      mysql_payments:
        condition: service_healthy
    restart: on-failure
    environment:
      # DATASOURCE URLs -> apuntan a los servicios de mysql del compose
      SPRING_DATASOURCE_INVENTORY_URL: jdbc:mysql://mysql_inventory:3306/inventorydb?pinGlobalTxToPhysicalConnection=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_INVENTORY_USERNAME: simis
      SPRING_DATASOURCE_INVENTORY_PASSWORD: password

      SPRING_DATASOURCE_PAYMENTS_URL: jdbc:mysql://mysql_payments:3306/paymentsdb?pinGlobalTxToPhysicalConnection=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_PAYMENTS_USERNAME: simis
      SPRING_DATASOURCE_PAYMENTS_PASSWORD: password

      SPRING_DATASOURCE_BILLING_URL: jdbc:mysql://mysql_billing:3306/billingdb?pinGlobalTxToPhysicalConnection=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_BILLING_USERNAME: simis
      SPRING_DATASOURCE_BILLING_PASSWORD: password

      SERVER_PORT: 8080
      GRPC_PORT: 50051

      # opcionales: si tu app usa las urls antiguas para WebClient (no deber√≠an usarse si el DAL es interno)
      INVENTORY_BASE: http://localhost:8080  # o http://payments:8080 if inventory endpoints are inside monolito
      BILLING_BASE:   http://localhost:8080
    ports:
      - "8080:8080"    # HTTP (REST / SOAP via Spring)
      - "50051:50051"  # gRPC
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_inventory_data:
  mysql_billing_data:
  mysql_payments_data:
